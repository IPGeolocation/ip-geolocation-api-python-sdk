# coding: utf-8

"""
    IPGeolocation.io - IP intelligence products

    Ipgeolocation provides a set of APIs to make ip based decisions.

    Creat a free account by signing up here:
    https://app.ipgeolocation.io/signup

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr
from typing import Optional, Union
from typing_extensions import Annotated
from ipgeolocation.models.time_conversion_response import TimeConversionResponse

from ipgeolocation.api_client import ApiClient, RequestSerialized
from ipgeolocation.api_response import ApiResponse
from ipgeolocation.rest import RESTResponseType


class TimeConversionApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def convert_time_between_timezones(
        self,
        time: Annotated[Optional[StrictStr], Field(description="time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.")] = None,
        tz_from: Annotated[Optional[StrictStr], Field(description="timezone to convert from")] = None,
        tz_to: Annotated[Optional[StrictStr], Field(description="timezone to convert to")] = None,
        lat_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert from")] = None,
        long_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert from")] = None,
        lat_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert to")] = None,
        long_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert to")] = None,
        location_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        location_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        icao_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        icao_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        iata_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        iata_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        locode_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        locode_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimeConversionResponse:
        """convert_time_between_timezones

        You can convert a timestamp provided as a query paramter time from one time zone to another time zone.

        :param time: time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
        :type time: str
        :param tz_from: timezone to convert from
        :type tz_from: str
        :param tz_to: timezone to convert to
        :type tz_to: str
        :param lat_from: latitude to convert from
        :type lat_from: float
        :param long_from: longitude to convert from
        :type long_from: float
        :param lat_to: latitude to convert to
        :type lat_to: float
        :param long_to: longitude to convert to
        :type long_to: float
        :param location_from: location to convert from
        :type location_from: str
        :param location_to: location to convert to
        :type location_to: str
        :param icao_from: location to convert from
        :type icao_from: str
        :param icao_to: location to convert to
        :type icao_to: str
        :param iata_from: location to convert from
        :type iata_from: str
        :param iata_to: location to convert to
        :type iata_to: str
        :param locode_from: location to convert from
        :type locode_from: str
        :param locode_to: location to convert to
        :type locode_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_time_between_timezones_serialize(
            time=time,
            tz_from=tz_from,
            tz_to=tz_to,
            lat_from=lat_from,
            long_from=long_from,
            lat_to=lat_to,
            long_to=long_to,
            location_from=location_from,
            location_to=location_to,
            icao_from=icao_from,
            icao_to=icao_to,
            iata_from=iata_from,
            iata_to=iata_to,
            locode_from=locode_from,
            locode_to=locode_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeConversionResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def convert_time_between_timezones_with_http_info(
        self,
        time: Annotated[Optional[StrictStr], Field(description="time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.")] = None,
        tz_from: Annotated[Optional[StrictStr], Field(description="timezone to convert from")] = None,
        tz_to: Annotated[Optional[StrictStr], Field(description="timezone to convert to")] = None,
        lat_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert from")] = None,
        long_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert from")] = None,
        lat_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert to")] = None,
        long_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert to")] = None,
        location_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        location_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        icao_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        icao_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        iata_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        iata_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        locode_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        locode_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimeConversionResponse]:
        """convert_time_between_timezones

        You can convert a timestamp provided as a query paramter time from one time zone to another time zone.

        :param time: time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
        :type time: str
        :param tz_from: timezone to convert from
        :type tz_from: str
        :param tz_to: timezone to convert to
        :type tz_to: str
        :param lat_from: latitude to convert from
        :type lat_from: float
        :param long_from: longitude to convert from
        :type long_from: float
        :param lat_to: latitude to convert to
        :type lat_to: float
        :param long_to: longitude to convert to
        :type long_to: float
        :param location_from: location to convert from
        :type location_from: str
        :param location_to: location to convert to
        :type location_to: str
        :param icao_from: location to convert from
        :type icao_from: str
        :param icao_to: location to convert to
        :type icao_to: str
        :param iata_from: location to convert from
        :type iata_from: str
        :param iata_to: location to convert to
        :type iata_to: str
        :param locode_from: location to convert from
        :type locode_from: str
        :param locode_to: location to convert to
        :type locode_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_time_between_timezones_serialize(
            time=time,
            tz_from=tz_from,
            tz_to=tz_to,
            lat_from=lat_from,
            long_from=long_from,
            lat_to=lat_to,
            long_to=long_to,
            location_from=location_from,
            location_to=location_to,
            icao_from=icao_from,
            icao_to=icao_to,
            iata_from=iata_from,
            iata_to=iata_to,
            locode_from=locode_from,
            locode_to=locode_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeConversionResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def convert_time_between_timezones_without_preload_content(
        self,
        time: Annotated[Optional[StrictStr], Field(description="time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.")] = None,
        tz_from: Annotated[Optional[StrictStr], Field(description="timezone to convert from")] = None,
        tz_to: Annotated[Optional[StrictStr], Field(description="timezone to convert to")] = None,
        lat_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert from")] = None,
        long_from: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert from")] = None,
        lat_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="latitude to convert to")] = None,
        long_to: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="longitude to convert to")] = None,
        location_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        location_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        icao_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        icao_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        iata_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        iata_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        locode_from: Annotated[Optional[StrictStr], Field(description="location to convert from")] = None,
        locode_to: Annotated[Optional[StrictStr], Field(description="location to convert to")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """convert_time_between_timezones

        You can convert a timestamp provided as a query paramter time from one time zone to another time zone.

        :param time: time parameter takes the input in the following two formats: i) 'yyyy-MM-dd HH:mm', and ii) 'yyyy-MM-dd HH:mm:ss'. This parameter is optional and you can omit it to convert the current time between two coordinates, time zones or locations.
        :type time: str
        :param tz_from: timezone to convert from
        :type tz_from: str
        :param tz_to: timezone to convert to
        :type tz_to: str
        :param lat_from: latitude to convert from
        :type lat_from: float
        :param long_from: longitude to convert from
        :type long_from: float
        :param lat_to: latitude to convert to
        :type lat_to: float
        :param long_to: longitude to convert to
        :type long_to: float
        :param location_from: location to convert from
        :type location_from: str
        :param location_to: location to convert to
        :type location_to: str
        :param icao_from: location to convert from
        :type icao_from: str
        :param icao_to: location to convert to
        :type icao_to: str
        :param iata_from: location to convert from
        :type iata_from: str
        :param iata_to: location to convert to
        :type iata_to: str
        :param locode_from: location to convert from
        :type locode_from: str
        :param locode_to: location to convert to
        :type locode_to: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._convert_time_between_timezones_serialize(
            time=time,
            tz_from=tz_from,
            tz_to=tz_to,
            lat_from=lat_from,
            long_from=long_from,
            lat_to=lat_to,
            long_to=long_to,
            location_from=location_from,
            location_to=location_to,
            icao_from=icao_from,
            icao_to=icao_to,
            iata_from=iata_from,
            iata_to=iata_to,
            locode_from=locode_from,
            locode_to=locode_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeConversionResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _convert_time_between_timezones_serialize(
        self,
        time,
        tz_from,
        tz_to,
        lat_from,
        long_from,
        lat_to,
        long_to,
        location_from,
        location_to,
        icao_from,
        icao_to,
        iata_from,
        iata_to,
        locode_from,
        locode_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if time is not None:
            
            _query_params.append(('time', time))
            
        if tz_from is not None:
            
            _query_params.append(('tz_from', tz_from))
            
        if tz_to is not None:
            
            _query_params.append(('tz_to', tz_to))
            
        if lat_from is not None:
            
            _query_params.append(('lat_from', lat_from))
            
        if long_from is not None:
            
            _query_params.append(('long_from', long_from))
            
        if lat_to is not None:
            
            _query_params.append(('lat_to', lat_to))
            
        if long_to is not None:
            
            _query_params.append(('long_to', long_to))
            
        if location_from is not None:
            
            _query_params.append(('location_from', location_from))
            
        if location_to is not None:
            
            _query_params.append(('location_to', location_to))
            
        if icao_from is not None:
            
            _query_params.append(('icao_from', icao_from))
            
        if icao_to is not None:
            
            _query_params.append(('icao_to', icao_to))
            
        if iata_from is not None:
            
            _query_params.append(('iata_from', iata_from))
            
        if iata_to is not None:
            
            _query_params.append(('iata_to', iata_to))
            
        if locode_from is not None:
            
            _query_params.append(('locode_from', locode_from))
            
        if locode_to is not None:
            
            _query_params.append(('locode_to', locode_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timezone/convert',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


