# coding: utf-8

"""
    IPGeolocation.io - IP intelligence products

    Ipgeolocation provides a set of APIs to make ip based decisions.

    Creat a free account by signing up here:
    https://app.ipgeolocation.io/signup

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from ipgeolocation.models.astronomy_response import AstronomyResponse
from ipgeolocation.models.time_series_response import TimeSeriesResponse

from ipgeolocation.api_client import ApiClient, RequestSerialized
from ipgeolocation.api_response import ApiResponse
from ipgeolocation.rest import RESTResponseType


class AstronomyApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_astronomy_details(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query paramter 'ip'. If not provided, will be your network IP")] = None,
        location: Annotated[Optional[StrictStr], Field(description="query paramter 'location'. If not provided, will be your ip location")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
        long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
        time_zone: Optional[StrictStr] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="The date (YYYY-MM-DD) to lookup for. default will be the current date")] = None,
        elevation: Annotated[Optional[Union[Annotated[float, Field(le=10000, strict=True, ge=0)], Annotated[int, Field(le=10000, strict=True, ge=0)]]], Field(description="query parameter 'elevation'")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> AstronomyResponse:
        """get_astronomy_details

        The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 

        :param ip: query paramter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param time_zone:
        :type time_zone: str
        :param var_date: The date (YYYY-MM-DD) to lookup for. default will be the current date
        :type var_date: str
        :param elevation: query parameter 'elevation'
        :type elevation: float
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_astronomy_details_serialize(
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            time_zone=time_zone,
            var_date=var_date,
            elevation=elevation,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AstronomyResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_astronomy_details_with_http_info(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query paramter 'ip'. If not provided, will be your network IP")] = None,
        location: Annotated[Optional[StrictStr], Field(description="query paramter 'location'. If not provided, will be your ip location")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
        long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
        time_zone: Optional[StrictStr] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="The date (YYYY-MM-DD) to lookup for. default will be the current date")] = None,
        elevation: Annotated[Optional[Union[Annotated[float, Field(le=10000, strict=True, ge=0)], Annotated[int, Field(le=10000, strict=True, ge=0)]]], Field(description="query parameter 'elevation'")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[AstronomyResponse]:
        """get_astronomy_details

        The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 

        :param ip: query paramter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param time_zone:
        :type time_zone: str
        :param var_date: The date (YYYY-MM-DD) to lookup for. default will be the current date
        :type var_date: str
        :param elevation: query parameter 'elevation'
        :type elevation: float
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_astronomy_details_serialize(
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            time_zone=time_zone,
            var_date=var_date,
            elevation=elevation,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AstronomyResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_astronomy_details_without_preload_content(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query paramter 'ip'. If not provided, will be your network IP")] = None,
        location: Annotated[Optional[StrictStr], Field(description="query paramter 'location'. If not provided, will be your ip location")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
        long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
        time_zone: Optional[StrictStr] = None,
        var_date: Annotated[Optional[StrictStr], Field(description="The date (YYYY-MM-DD) to lookup for. default will be the current date")] = None,
        elevation: Annotated[Optional[Union[Annotated[float, Field(le=10000, strict=True, ge=0)], Annotated[int, Field(le=10000, strict=True, ge=0)]]], Field(description="query parameter 'elevation'")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_astronomy_details

        The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time. 

        :param ip: query paramter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param time_zone:
        :type time_zone: str
        :param var_date: The date (YYYY-MM-DD) to lookup for. default will be the current date
        :type var_date: str
        :param elevation: query parameter 'elevation'
        :type elevation: float
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_astronomy_details_serialize(
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            time_zone=time_zone,
            var_date=var_date,
            elevation=elevation,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "AstronomyResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_astronomy_details_serialize(
        self,
        ip,
        location,
        lat,
        long,
        time_zone,
        var_date,
        elevation,
        output,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if location is not None:
            
            _query_params.append(('location', location))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if long is not None:
            
            _query_params.append(('long', long))
            
        if time_zone is not None:
            
            _query_params.append(('time_zone', time_zone))
            
        if var_date is not None:
            
            _query_params.append(('date', var_date))
            
        if elevation is not None:
            
            _query_params.append(('elevation', elevation))
            
        if output is not None:
            
            _query_params.append(('output', output))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/astronomy',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_time_series_lookup(
            self,
            date_start: Annotated[
                StrictStr, Field(description="To lookup astronomy details from this date in YYYY-MM-DD format")],
            date_end: Annotated[StrictStr, Field(
                description="To lookup astronomy details from start date to this end date. (YYYY-MM-DD)")],
            ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'.")] = None,
            location: Annotated[Optional[StrictStr], Field(
                description="query paramter 'location'. If not provided, will be your ip location")] = None,
            lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
            long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
            output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
            lang: Annotated[Optional[StrictStr], Field(
                description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimeSeriesResponse:
        """get_time_series_lookup

        You can look up astronomy details for any location by providing a starting and ending date for the time series. The API allows a maximum 90-day lookup period, whether for future or past dates. 

        :param date_start: To lookup astronomy details from this date in YYYY-MM-DD format (required)
        :type date_start: str
        :param date_end: To lookup astronomy details from start date to this end date. (YYYY-MM-DD) (required)
        :type date_end: str
        :param ip: query parameter 'ip'.
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_time_series_lookup_serialize(
            date_start=date_start,
            date_end=date_end,
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeSeriesResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_time_series_lookup_with_http_info(
            self,
            date_start: Annotated[
                StrictStr, Field(description="To lookup astronomy details from this date in YYYY-MM-DD format")],
            date_end: Annotated[StrictStr, Field(
                description="To lookup astronomy details from start date to this end date. (YYYY-MM-DD)")],
            ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'.")] = None,
            location: Annotated[Optional[StrictStr], Field(
                description="query paramter 'location'. If not provided, will be your ip location")] = None,
            lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
            long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
            output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
            lang: Annotated[Optional[StrictStr], Field(
                description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimeSeriesResponse]:
        """get_time_series_lookup

        You can look up astronomy details for any location by providing a starting and ending date for the time series. The API allows a maximum 90-day lookup period, whether for future or past dates. 

        :param date_start: To lookup astronomy details from this date in YYYY-MM-DD format (required)
        :type date_start: str
        :param date_end: To lookup astronomy details from start date to this end date. (YYYY-MM-DD) (required)
        :type date_end: str
        :param ip: query parameter 'ip'.
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_time_series_lookup_serialize(
            date_start=date_start,
            date_end=date_end,
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeSeriesResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_time_series_lookup_without_preload_content(
            self,
            date_start: Annotated[
                StrictStr, Field(description="To lookup astronomy details from this date in YYYY-MM-DD format")],
            date_end: Annotated[StrictStr, Field(
                description="To lookup astronomy details from start date to this end date. (YYYY-MM-DD)")],
            ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'.")] = None,
            location: Annotated[Optional[StrictStr], Field(
                description="query paramter 'location'. If not provided, will be your ip location")] = None,
            lat: Annotated[Optional[StrictStr], Field(description="query paramter 'lat'.")] = None,
            long: Annotated[Optional[StrictStr], Field(description="query paramter 'long'.")] = None,
            output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
            lang: Annotated[Optional[StrictStr], Field(
                description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
            _request_timeout: Union[
                None,
                Annotated[StrictFloat, Field(gt=0)],
                Tuple[
                    Annotated[StrictFloat, Field(gt=0)],
                    Annotated[StrictFloat, Field(gt=0)]
                ]
            ] = None,
            _request_auth: Optional[Dict[StrictStr, Any]] = None,
            _content_type: Optional[StrictStr] = None,
            _headers: Optional[Dict[StrictStr, Any]] = None,
            _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_time_series_lookup

        You can look up astronomy details for any location by providing a starting and ending date for the time series. The API allows a maximum 90-day lookup period, whether for future or past dates. 

        :param date_start: To lookup astronomy details from this date in YYYY-MM-DD format (required)
        :type date_start: str
        :param date_end: To lookup astronomy details from start date to this end date. (YYYY-MM-DD) (required)
        :type date_end: str
        :param ip: query parameter 'ip'.
        :type ip: str
        :param location: query paramter 'location'. If not provided, will be your ip location
        :type location: str
        :param lat: query paramter 'lat'.
        :type lat: str
        :param long: query paramter 'long'.
        :type long: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_time_series_lookup_serialize(
            date_start=date_start,
            date_end=date_end,
            ip=ip,
            location=location,
            lat=lat,
            long=long,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeSeriesResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_time_series_lookup_serialize(
            self,
            date_start,
            date_end,
            ip,
            location,
            lat,
            long,
            output,
            lang,
            _request_auth,
            _content_type,
            _headers,
            _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ip is not None:
            _query_params.append(('ip', ip))

        if date_start is not None:
            _query_params.append(('dateStart', date_start))

        if date_end is not None:
            _query_params.append(('dateEnd', date_end))

        if location is not None:
            _query_params.append(('location', location))

        if lat is not None:
            _query_params.append(('lat', lat))

        if long is not None:
            _query_params.append(('long', long))

        if output is not None:
            _query_params.append(('output', output))

        if lang is not None:
            _query_params.append(('lang', lang))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json',
                    'application/xml'
                ]
            )

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/astronomy/timeSeries',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


