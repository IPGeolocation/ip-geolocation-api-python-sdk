# coding: utf-8

"""
    IPGeolocation.io - IP intelligence products

    Ipgeolocation provides a set of APIs to make ip based decisions.

    Creat a free account by signing up here:
    https://app.ipgeolocation.io/signup

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from ipgeolocation.models.get_bulk_ip_geolocation_request import GetBulkIpGeolocationRequest
from ipgeolocation.models.get_bulk_ip_security_info_response import GetBulkIpSecurityInfoResponse
from ipgeolocation.models.ip_security_api_response import IPSecurityAPIResponse

from ipgeolocation.api_client import ApiClient, RequestSerialized
from ipgeolocation.api_response import ApiResponse
from ipgeolocation.rest import RESTResponseType


class IPSecurityApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_bulk_ip_security_info(
        self,
        get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest,
        include: Annotated[Optional[StrictStr], Field(description="Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[GetBulkIpSecurityInfoResponse]:
        """get_bulk_ip_security_info

        The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.

        :param get_bulk_ip_geolocation_request: (required)
        :type get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest
        :param include: Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network 
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bulk_ip_security_info_serialize(
            get_bulk_ip_geolocation_request=get_bulk_ip_geolocation_request,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetBulkIpSecurityInfoResponse]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '413': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_bulk_ip_security_info_with_http_info(
        self,
        get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest,
        include: Annotated[Optional[StrictStr], Field(description="Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[GetBulkIpSecurityInfoResponse]]:
        """get_bulk_ip_security_info

        The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.

        :param get_bulk_ip_geolocation_request: (required)
        :type get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest
        :param include: Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network 
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bulk_ip_security_info_serialize(
            get_bulk_ip_geolocation_request=get_bulk_ip_geolocation_request,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetBulkIpSecurityInfoResponse]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '413': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_bulk_ip_security_info_without_preload_content(
        self,
        get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest,
        include: Annotated[Optional[StrictStr], Field(description="Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network ")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format.")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_bulk_ip_security_info

        The Bulk IP Security Lookup API can provide security details for up to `50,000` bulk IPs. This API also has parameters to customize the response, just like the single IP Security Lookup API.

        :param get_bulk_ip_geolocation_request: (required)
        :type get_bulk_ip_geolocation_request: GetBulkIpGeolocationRequest
        :param include: Include optional objects like `location`, `network`.  Use comma-separated values. Example: include=location,network 
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format.
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_bulk_ip_security_info_serialize(
            get_bulk_ip_geolocation_request=get_bulk_ip_geolocation_request,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[GetBulkIpSecurityInfoResponse]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '413': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_bulk_ip_security_info_serialize(
        self,
        get_bulk_ip_geolocation_request,
        include,
        fields,
        excludes,
        output,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if excludes is not None:
            
            _query_params.append(('excludes', excludes))
            
        if output is not None:
            
            _query_params.append(('output', output))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if get_bulk_ip_geolocation_request is not None:
            _body_params = get_bulk_ip_geolocation_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/security-bulk',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_ip_security_info(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'. If not provided, will be your network IP")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Include optional details like location and/or network.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> IPSecurityAPIResponse:
        """get_ip_security_info

        IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it's VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider's name.

        :param ip: query parameter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param include: Include optional details like location and/or network.
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_security_info_serialize(
            ip=ip,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPSecurityAPIResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_ip_security_info_with_http_info(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'. If not provided, will be your network IP")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Include optional details like location and/or network.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[IPSecurityAPIResponse]:
        """get_ip_security_info

        IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it's VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider's name.

        :param ip: query parameter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param include: Include optional details like location and/or network.
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_security_info_serialize(
            ip=ip,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPSecurityAPIResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_ip_security_info_without_preload_content(
        self,
        ip: Annotated[Optional[StrictStr], Field(description="query parameter 'ip'. If not provided, will be your network IP")] = None,
        include: Annotated[Optional[StrictStr], Field(description="Include optional details like location and/or network.")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Get specific fields, objects from the response.")] = None,
        excludes: Annotated[Optional[StrictStr], Field(description="Exclude specific fields, objects from the response.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_ip_security_info

        IP Security API provides security details of a given IP. It detects whether the IP is proxy, tor or bot. It also shows the proxy types of the IP (like VPN, PROXY, RELAY etc.) with it's VPN/proxy service provider making our API powerful VPN checker. It finds the IPs that are involved in spam activities. It also checks whether the IP links to a cloud provider and includes the provider's name.

        :param ip: query parameter 'ip'. If not provided, will be your network IP
        :type ip: str
        :param include: Include optional details like location and/or network.
        :type include: str
        :param fields: Get specific fields, objects from the response.
        :type fields: str
        :param excludes: Exclude specific fields, objects from the response.
        :type excludes: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_ip_security_info_serialize(
            ip=ip,
            include=include,
            fields=fields,
            excludes=excludes,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "IPSecurityAPIResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_ip_security_info_serialize(
        self,
        ip,
        include,
        fields,
        excludes,
        output,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if include is not None:
            
            _query_params.append(('include', include))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if excludes is not None:
            
            _query_params.append(('excludes', excludes))
            
        if output is not None:
            
            _query_params.append(('output', output))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/security',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


