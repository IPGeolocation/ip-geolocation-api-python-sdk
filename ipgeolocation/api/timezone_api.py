# coding: utf-8

"""
    IPGeolocation.io - IP intelligence products

    Ipgeolocation provides a set of APIs to make ip based decisions.

    Creat a free account by signing up here:
    https://app.ipgeolocation.io/signup

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from ipgeolocation.models.time_zone_detailed_response import TimeZoneDetailedResponse

from ipgeolocation.api_client import ApiClient, RequestSerialized
from ipgeolocation.api_response import ApiResponse
from ipgeolocation.rest import RESTResponseType


class TimezoneApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_timezone_info(
        self,
        tz: Annotated[Optional[StrictStr], Field(description="pass a valid time zone name as a query parameter tz to get the time zone information.")] = None,
        location: Annotated[Optional[StrictStr], Field(description="pass any address of a location as the query parameter location to get the time zone information.")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="pass the latitude of a location as query parameters to get the time zone information.")] = None,
        long: Annotated[Optional[StrictStr], Field(description="pass the longitude of a location as query parameters to get the time zone information.")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.")] = None,
        iata_code: Annotated[Optional[StrictStr], Field(description="pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        icao_code: Annotated[Optional[StrictStr], Field(description="pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        lo_code: Annotated[Optional[StrictStr], Field(description="pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> TimeZoneDetailedResponse:
        """Timezone information details

        The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine's IP address to return the regional time zone information. 

        :param tz: pass a valid time zone name as a query parameter tz to get the time zone information.
        :type tz: str
        :param location: pass any address of a location as the query parameter location to get the time zone information.
        :type location: str
        :param lat: pass the latitude of a location as query parameters to get the time zone information.
        :type lat: str
        :param long: pass the longitude of a location as query parameters to get the time zone information.
        :type long: str
        :param ip: You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
        :type ip: str
        :param iata_code: pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type iata_code: str
        :param icao_code: pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type icao_code: str
        :param lo_code: pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
        :type lo_code: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timezone_info_serialize(
            tz=tz,
            location=location,
            lat=lat,
            long=long,
            ip=ip,
            iata_code=iata_code,
            icao_code=icao_code,
            lo_code=lo_code,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeZoneDetailedResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_timezone_info_with_http_info(
        self,
        tz: Annotated[Optional[StrictStr], Field(description="pass a valid time zone name as a query parameter tz to get the time zone information.")] = None,
        location: Annotated[Optional[StrictStr], Field(description="pass any address of a location as the query parameter location to get the time zone information.")] = None,
        lat: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="pass the latitude of a location as query parameters to get the time zone information.")] = None,
        long: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="pass the longitude of a location as query parameters to get the time zone information.")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.")] = None,
        iata_code: Annotated[Optional[StrictStr], Field(description="pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        icao_code: Annotated[Optional[StrictStr], Field(description="pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        lo_code: Annotated[Optional[StrictStr], Field(description="pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[TimeZoneDetailedResponse]:
        """Timezone information details

        The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine's IP address to return the regional time zone information. 

        :param tz: pass a valid time zone name as a query parameter tz to get the time zone information.
        :type tz: str
        :param location: pass any address of a location as the query parameter location to get the time zone information.
        :type location: str
        :param lat: pass the latitude of a location as query parameters to get the time zone information.
        :type lat: str
        :param long: pass the longitude of a location as query parameters to get the time zone information.
        :type long: str
        :param ip: You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
        :type ip: str
        :param iata_code: pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type iata_code: str
        :param icao_code: pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type icao_code: str
        :param lo_code: pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
        :type lo_code: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timezone_info_serialize(
            tz=tz,
            location=location,
            lat=lat,
            long=long,
            ip=ip,
            iata_code=iata_code,
            icao_code=icao_code,
            lo_code=lo_code,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeZoneDetailedResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_timezone_info_without_preload_content(
        self,
        tz: Annotated[Optional[StrictStr], Field(description="pass a valid time zone name as a query parameter tz to get the time zone information.")] = None,
        location: Annotated[Optional[StrictStr], Field(description="pass any address of a location as the query parameter location to get the time zone information.")] = None,
        lat: Annotated[Optional[StrictStr], Field(description="pass the latitude of a location as query parameters to get the time zone information.")] = None,
        long: Annotated[Optional[StrictStr], Field(description="pass the longitude of a location as query parameters to get the time zone information.")] = None,
        ip: Annotated[Optional[StrictStr], Field(description="You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.")] = None,
        iata_code: Annotated[Optional[StrictStr], Field(description="pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        icao_code: Annotated[Optional[StrictStr], Field(description="pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.")] = None,
        lo_code: Annotated[Optional[StrictStr], Field(description="pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.")] = None,
        output: Annotated[Optional[StrictStr], Field(description="Desired output format (json or xml).")] = None,
        lang: Annotated[Optional[StrictStr], Field(description="By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Timezone information details

        The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.  The API determines the time zone based on the following priority order if multiple parameters are provided:   1. Time Zone Name   2. Geographic Coordinates (latitude & longitude)   3. Location Address   4. IP Address   5. IATA Code   6. ICAO Code   7. UN/LOCODE  Enriched response data is returned based on the type of input: - IP: includes geolocation info - Address: includes location metadata - IATA/ICAO: includes airport info - UN/LOCODE: includes city details  You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine's IP address to return the regional time zone information. 

        :param tz: pass a valid time zone name as a query parameter tz to get the time zone information.
        :type tz: str
        :param location: pass any address of a location as the query parameter location to get the time zone information.
        :type location: str
        :param lat: pass the latitude of a location as query parameters to get the time zone information.
        :type lat: str
        :param long: pass the longitude of a location as query parameters to get the time zone information.
        :type long: str
        :param ip: You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
        :type ip: str
        :param iata_code: pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type iata_code: str
        :param icao_code: pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
        :type icao_code: str
        :param lo_code: pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
        :type lo_code: str
        :param output: Desired output format (json or xml).
        :type output: str
        :param lang: By default, the API responds in English. You can change the response language by passing the language code as a query parameter `lang`. Multi language feature is available only for `paid users`.
        :type lang: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_timezone_info_serialize(
            tz=tz,
            location=location,
            lat=lat,
            long=long,
            ip=ip,
            iata_code=iata_code,
            icao_code=icao_code,
            lo_code=lo_code,
            output=output,
            lang=lang,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TimeZoneDetailedResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '429': "ErrorResponse",
            '499': "ErrorResponse",
            '500': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_timezone_info_serialize(
        self,
        tz,
        location,
        lat,
        long,
        ip,
        iata_code,
        icao_code,
        lo_code,
        output,
        lang,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if tz is not None:
            
            _query_params.append(('tz', tz))
            
        if location is not None:
            
            _query_params.append(('location', location))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if long is not None:
            
            _query_params.append(('long', long))
            
        if ip is not None:
            
            _query_params.append(('ip', ip))
            
        if iata_code is not None:
            
            _query_params.append(('iata_code', iata_code))
            
        if icao_code is not None:
            
            _query_params.append(('icao_code', icao_code))
            
        if lo_code is not None:
            
            _query_params.append(('lo_code', lo_code))
            
        if output is not None:
            
            _query_params.append(('output', output))
            
        if lang is not None:
            
            _query_params.append(('lang', lang))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json', 
                    'application/xml'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/timezone',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


